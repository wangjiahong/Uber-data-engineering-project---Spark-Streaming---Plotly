{"version":3,"file":"376f25cdf18918b6c8e9.chunk.js","mappings":"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","sources":["webpack://superset/./plugins/plugin-chart-echarts/src/components/ExtraControls.tsx","webpack://superset/./plugins/plugin-chart-echarts/src/Timeseries/EchartsTimeseries.tsx","webpack://superset/./plugins/plugin-chart-echarts/src/components/Echart.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { HandlerFunction, JsonValue, styled } from '@superset-ui/core';\nimport {\n  RadioButtonOption,\n  sharedControlComponents,\n} from '@superset-ui/chart-controls';\nimport { AreaChartExtraControlsOptions } from '../constants';\n\nconst { RadioButtonControl } = sharedControlComponents;\n\nconst ExtraControlsWrapper = styled.div`\n  text-align: center;\n`;\n\nexport function useExtraControl<\n  F extends {\n    stack: any;\n    area: boolean;\n  },\n>({\n  formData,\n  setControlValue,\n}: {\n  formData: F;\n  setControlValue?: HandlerFunction;\n}) {\n  const { stack, area } = formData;\n  const [extraValue, setExtraValue] = useState<JsonValue | undefined>(\n    stack ?? undefined,\n  );\n\n  useEffect(() => {\n    setExtraValue(stack);\n  }, [stack]);\n\n  const extraControlsOptions = useMemo(() => {\n    if (area) {\n      return AreaChartExtraControlsOptions;\n    }\n    return [];\n  }, [area]);\n\n  const extraControlsHandler = useCallback(\n    (value: RadioButtonOption[0]) => {\n      if (area) {\n        if (setControlValue) {\n          setControlValue('stack', value);\n          setExtraValue(value);\n        }\n      }\n    },\n    [area, setControlValue],\n  );\n\n  return {\n    extraControlsOptions,\n    extraControlsHandler,\n    extraValue,\n  };\n}\n\nexport function ExtraControls<\n  F extends {\n    stack: any;\n    area: boolean;\n    showExtraControls: boolean;\n  },\n>({\n  formData,\n  setControlValue,\n}: {\n  formData: F;\n  setControlValue?: HandlerFunction;\n}) {\n  const { extraControlsOptions, extraControlsHandler, extraValue } =\n    useExtraControl<F>({\n      formData,\n      setControlValue,\n    });\n\n  if (!formData.showExtraControls) {\n    return null;\n  }\n\n  return (\n    <ExtraControlsWrapper>\n      <RadioButtonControl\n        options={extraControlsOptions}\n        onChange={extraControlsHandler}\n        value={extraValue}\n      />\n    </ExtraControlsWrapper>\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport {\n  DTTM_ALIAS,\n  BinaryQueryObjectFilterClause,\n  AxisType,\n} from '@superset-ui/core';\nimport { ViewRootGroup } from 'echarts/types/src/util/types';\nimport GlobalModel from 'echarts/types/src/model/Global';\nimport ComponentModel from 'echarts/types/src/model/Component';\nimport { EchartsHandler, EventHandlers } from '../types';\nimport Echart from '../components/Echart';\nimport { TimeseriesChartTransformedProps } from './types';\nimport { currentSeries } from '../utils/series';\nimport { ExtraControls } from '../components/ExtraControls';\n\nconst TIMER_DURATION = 300;\n\n// @ts-ignore\nexport default function EchartsTimeseries({\n  formData,\n  height,\n  width,\n  echartOptions,\n  groupby,\n  labelMap,\n  selectedValues,\n  setDataMask,\n  setControlValue,\n  legendData = [],\n  onContextMenu,\n  xValueFormatter,\n  xAxis,\n  refs,\n  emitCrossFilters,\n}: TimeseriesChartTransformedProps) {\n  const { stack } = formData;\n  const echartRef = useRef<EchartsHandler | null>(null);\n  // eslint-disable-next-line no-param-reassign\n  refs.echartRef = echartRef;\n  const lastTimeRef = useRef(Date.now());\n  const lastSelectedLegend = useRef('');\n  const clickTimer = useRef<ReturnType<typeof setTimeout>>();\n  const extraControlRef = useRef<HTMLDivElement>(null);\n  const [extraControlHeight, setExtraControlHeight] = useState(0);\n  useEffect(() => {\n    const updatedHeight = extraControlRef.current?.offsetHeight || 0;\n    setExtraControlHeight(updatedHeight);\n  }, [formData.showExtraControls]);\n\n  const handleDoubleClickChange = useCallback(\n    (name?: string) => {\n      const echartInstance = echartRef.current?.getEchartInstance();\n      if (!name) {\n        currentSeries.legend = '';\n        echartInstance?.dispatchAction({\n          type: 'legendAllSelect',\n        });\n      } else {\n        legendData.forEach(datum => {\n          if (datum === name) {\n            currentSeries.legend = datum;\n            echartInstance?.dispatchAction({\n              type: 'legendSelect',\n              name: datum,\n            });\n          } else {\n            echartInstance?.dispatchAction({\n              type: 'legendUnSelect',\n              name: datum,\n            });\n          }\n        });\n      }\n    },\n    [legendData],\n  );\n\n  const getModelInfo = (target: ViewRootGroup, globalModel: GlobalModel) => {\n    let el = target;\n    let model: ComponentModel | null = null;\n    while (el) {\n      // eslint-disable-next-line no-underscore-dangle\n      const modelInfo = el.__ecComponentInfo;\n      if (modelInfo != null) {\n        model = globalModel.getComponent(modelInfo.mainType, modelInfo.index);\n        break;\n      }\n      el = el.parent;\n    }\n    return model;\n  };\n\n  const handleChange = useCallback(\n    (values: string[]) => {\n      if (!emitCrossFilters) {\n        return;\n      }\n      const groupbyValues = values.map(value => labelMap[value]);\n\n      setDataMask({\n        extraFormData: {\n          filters:\n            values.length === 0\n              ? []\n              : groupby.map((col, idx) => {\n                  const val = groupbyValues.map(v => v[idx]);\n                  if (val === null || val === undefined)\n                    return {\n                      col,\n                      op: 'IS NULL',\n                    };\n                  return {\n                    col,\n                    op: 'IN',\n                    val: val as (string | number | boolean)[],\n                  };\n                }),\n        },\n        filterState: {\n          label: groupbyValues.length ? groupbyValues : undefined,\n          value: groupbyValues.length ? groupbyValues : null,\n          selectedValues: values.length ? values : null,\n        },\n      });\n    },\n    [groupby, labelMap, setDataMask, emitCrossFilters],\n  );\n\n  const eventHandlers: EventHandlers = {\n    click: props => {\n      if (clickTimer.current) {\n        clearTimeout(clickTimer.current);\n      }\n      // Ensure that double-click events do not trigger single click event. So we put it in the timer.\n      clickTimer.current = setTimeout(() => {\n        const { seriesName: name } = props;\n        const values = Object.values(selectedValues);\n        if (values.includes(name)) {\n          handleChange(values.filter(v => v !== name));\n        } else {\n          handleChange([name]);\n        }\n      }, TIMER_DURATION);\n    },\n    mouseout: () => {\n      currentSeries.name = '';\n    },\n    mouseover: params => {\n      currentSeries.name = params.seriesName;\n    },\n    legendselectchanged: payload => {\n      const currentTime = Date.now();\n      // TIMER_DURATION is the interval between two legendselectchanged event\n      if (\n        currentTime - lastTimeRef.current < TIMER_DURATION &&\n        lastSelectedLegend.current === payload.name\n      ) {\n        // execute dbclick\n        handleDoubleClickChange(payload.name);\n      } else {\n        lastTimeRef.current = currentTime;\n        // remember last selected legend\n        lastSelectedLegend.current = payload.name;\n      }\n      // if all legend is unselected, we keep all selected\n      if (Object.values(payload.selected).every(i => !i)) {\n        handleDoubleClickChange();\n      }\n    },\n    contextmenu: eventParams => {\n      if (onContextMenu) {\n        eventParams.event.stop();\n        const { data } = eventParams;\n        if (data) {\n          const pointerEvent = eventParams.event.event;\n          const values = [\n            ...(eventParams.name ? [eventParams.name] : []),\n            ...labelMap[eventParams.seriesName],\n          ];\n          const filters: BinaryQueryObjectFilterClause[] = [];\n          if (xAxis.type === AxisType.time) {\n            filters.push({\n              col:\n                // if the xAxis is '__timestamp', granularity_sqla will be the column of filter\n                xAxis.label === DTTM_ALIAS\n                  ? formData.granularitySqla\n                  : xAxis.label,\n              grain: formData.timeGrainSqla,\n              op: '==',\n              val: data[0],\n              formattedVal: xValueFormatter(data[0]),\n            });\n          }\n          [\n            ...(xAxis.type === AxisType.category ? [xAxis.label] : []),\n            ...formData.groupby,\n          ].forEach((dimension, i) =>\n            filters.push({\n              col: dimension,\n              op: '==',\n              val: values[i],\n              formattedVal: String(values[i]),\n            }),\n          );\n          onContextMenu(pointerEvent.clientX, pointerEvent.clientY, filters);\n        }\n      }\n    },\n  };\n\n  const zrEventHandlers: EventHandlers = {\n    dblclick: params => {\n      // clear single click timer\n      if (clickTimer.current) {\n        clearTimeout(clickTimer.current);\n      }\n      const pointInPixel = [params.offsetX, params.offsetY];\n      const echartInstance = echartRef.current?.getEchartInstance();\n      if (echartInstance?.containPixel('grid', pointInPixel)) {\n        // do not trigger if click unstacked chart's blank area\n        if (!stack && params.target?.type === 'ec-polygon') return;\n        // @ts-ignore\n        const globalModel = echartInstance.getModel();\n        const model = getModelInfo(params.target, globalModel);\n        const seriesCount = globalModel.getSeriesCount();\n        const currentSeriesIndices = globalModel.getCurrentSeriesIndices();\n        if (model) {\n          const { name } = model;\n          if (seriesCount !== currentSeriesIndices.length) {\n            handleDoubleClickChange();\n          } else {\n            handleDoubleClickChange(name);\n          }\n        }\n      }\n    },\n  };\n\n  return (\n    <>\n      <div ref={extraControlRef}>\n        <ExtraControls formData={formData} setControlValue={setControlValue} />\n      </div>\n      <Echart\n        refs={refs}\n        height={height - extraControlHeight}\n        width={width}\n        echartOptions={echartOptions}\n        eventHandlers={eventHandlers}\n        zrEventHandlers={zrEventHandlers}\n        selectedValues={selectedValues}\n      />\n    </>\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  forwardRef,\n  useImperativeHandle,\n  useLayoutEffect,\n  useCallback,\n} from 'react';\nimport { styled } from '@superset-ui/core';\nimport { ECharts, init } from 'echarts';\nimport { EchartsHandler, EchartsProps, EchartsStylesProps } from '../types';\n\nconst Styles = styled.div<EchartsStylesProps>`\n  height: ${({ height }) => height};\n  width: ${({ width }) => width};\n`;\n\nfunction Echart(\n  {\n    width,\n    height,\n    echartOptions,\n    eventHandlers,\n    zrEventHandlers,\n    selectedValues = {},\n    refs,\n  }: EchartsProps,\n  ref: React.Ref<EchartsHandler>,\n) {\n  const divRef = useRef<HTMLDivElement>(null);\n  if (refs) {\n    // eslint-disable-next-line no-param-reassign\n    refs.divRef = divRef;\n  }\n  const chartRef = useRef<ECharts>();\n  const currentSelection = useMemo(\n    () => Object.keys(selectedValues) || [],\n    [selectedValues],\n  );\n  const previousSelection = useRef<string[]>([]);\n\n  useImperativeHandle(ref, () => ({\n    getEchartInstance: () => chartRef.current,\n  }));\n\n  useEffect(() => {\n    if (!divRef.current) return;\n    if (!chartRef.current) {\n      chartRef.current = init(divRef.current);\n    }\n\n    Object.entries(eventHandlers || {}).forEach(([name, handler]) => {\n      chartRef.current?.off(name);\n      chartRef.current?.on(name, handler);\n    });\n\n    Object.entries(zrEventHandlers || {}).forEach(([name, handler]) => {\n      chartRef.current?.getZr().off(name);\n      chartRef.current?.getZr().on(name, handler);\n    });\n\n    chartRef.current.setOption(echartOptions, true);\n  }, [echartOptions, eventHandlers, zrEventHandlers]);\n\n  // highlighting\n  useEffect(() => {\n    if (!chartRef.current) return;\n    chartRef.current.dispatchAction({\n      type: 'downplay',\n      dataIndex: previousSelection.current.filter(\n        value => !currentSelection.includes(value),\n      ),\n    });\n    if (currentSelection.length) {\n      chartRef.current.dispatchAction({\n        type: 'highlight',\n        dataIndex: currentSelection,\n      });\n    }\n    previousSelection.current = currentSelection;\n  }, [currentSelection]);\n\n  const handleSizeChange = useCallback(\n    ({ width, height }: { width: number; height: number }) => {\n      if (chartRef.current) {\n        chartRef.current.resize({ width, height });\n      }\n    },\n    [],\n  );\n\n  // did mount\n  useEffect(() => {\n    handleSizeChange({ width, height });\n    return () => chartRef.current?.dispose();\n  }, []);\n\n  useLayoutEffect(() => {\n    handleSizeChange({ width, height });\n  }, [width, height, handleSizeChange]);\n\n  return <Styles ref={divRef} height={height} width={width} />;\n}\n\nexport default forwardRef(Echart);\n"],"names":["RadioButtonControl","sharedControlComponents","ExtraControlsWrapper","styled","ExtraControls","formData","setControlValue","extraControlsOptions","extraControlsHandler","extraValue","stack","area","setExtraValue","useState","undefined","useEffect","useMemo","AreaChartExtraControlsOptions","useCallback","value","useExtraControl","showExtraControls","options","onChange","EchartsTimeseries","height","width","echartOptions","groupby","labelMap","selectedValues","setDataMask","legendData","onContextMenu","xValueFormatter","xAxis","refs","emitCrossFilters","echartRef","useRef","lastTimeRef","Date","now","lastSelectedLegend","clickTimer","extraControlRef","extraControlHeight","setExtraControlHeight","updatedHeight","current","offsetHeight","handleDoubleClickChange","name","echartInstance","getEchartInstance","forEach","datum","currentSeries","dispatchAction","type","handleChange","values","groupbyValues","map","extraFormData","filters","length","col","idx","val","v","op","filterState","label","eventHandlers","click","props","clearTimeout","setTimeout","seriesName","Object","filter","mouseout","mouseover","params","legendselectchanged","payload","currentTime","selected","every","i","contextmenu","eventParams","event","stop","data","pointerEvent","AxisType","push","DTTM_ALIAS","granularitySqla","grain","timeGrainSqla","formattedVal","dimension","String","clientX","clientY","zrEventHandlers","dblclick","pointInPixel","offsetX","offsetY","containPixel","target","globalModel","getModel","model","el","modelInfo","__ecComponentInfo","getComponent","mainType","index","parent","getModelInfo","seriesCount","getSeriesCount","currentSeriesIndices","getCurrentSeriesIndices","ref","Echart","Styles","divRef","chartRef","currentSelection","keys","previousSelection","useImperativeHandle","init","entries","handler","off","on","getZr","setOption","dataIndex","handleSizeChange","resize","dispose","useLayoutEffect","forwardRef"],"sourceRoot":""}