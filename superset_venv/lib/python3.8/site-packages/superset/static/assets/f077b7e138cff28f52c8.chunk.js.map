{"version":3,"file":"f077b7e138cff28f52c8.chunk.js","mappings":"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","sources":["webpack://superset/./node_modules/lodash/uniqBy.js","webpack://superset/./src/components/ImportModal/index.tsx","webpack://superset/./src/components/ListView/CrossLinksTooltip.tsx","webpack://superset/./src/components/ListView/CrossLinks.tsx","webpack://superset/./src/pages/ChartList/index.tsx"],"sourcesContent":["var baseIteratee = require('./_baseIteratee'),\n    baseUniq = require('./_baseUniq');\n\n/**\n * This method is like `_.uniq` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * uniqueness is computed. The order of result values is determined by the\n * order they occur in the array. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n * // => [2.1, 1.2]\n *\n * // The `_.property` iteratee shorthand.\n * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }, { 'x': 2 }]\n */\nfunction uniqBy(array, iteratee) {\n  return (array && array.length) ? baseUniq(array, baseIteratee(iteratee, 2)) : [];\n}\n\nmodule.exports = uniqBy;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { FunctionComponent, useEffect, useState } from 'react';\nimport { UploadChangeParam, UploadFile } from 'antd/lib/upload/interface';\nimport { styled, t } from '@superset-ui/core';\n\nimport Button from 'src/components/Button';\nimport Modal from 'src/components/Modal';\nimport { Upload } from 'src/components';\nimport { useImportResource } from 'src/views/CRUD/hooks';\nimport { ImportResourceName } from 'src/views/CRUD/types';\nimport ErrorAlert from './ErrorAlert';\n\nconst HelperMessage = styled.div`\n  display: block;\n  color: ${({ theme }) => theme.colors.grayscale.base};\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n`;\n\nconst StyledInputContainer = styled.div`\n  padding-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  padding-top: ${({ theme }) => theme.gridUnit * 2}px;\n\n  & > div {\n    margin: ${({ theme }) => theme.gridUnit}px 0;\n  }\n\n  &.extra-container {\n    padding-top: 8px;\n  }\n\n  .confirm-overwrite {\n    margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  .input-container {\n    display: flex;\n    align-items: center;\n\n    label {\n      display: flex;\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n\n    i {\n      margin: 0 ${({ theme }) => theme.gridUnit}px;\n    }\n  }\n\n  input,\n  textarea {\n    flex: 1 1 auto;\n  }\n\n  textarea {\n    height: 160px;\n    resize: none;\n  }\n\n  input::placeholder,\n  textarea::placeholder {\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n  }\n\n  textarea,\n  input[type='text'],\n  input[type='number'] {\n    padding: ${({ theme }) => theme.gridUnit * 1.5}px\n      ${({ theme }) => theme.gridUnit * 2}px;\n    border-style: none;\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    border-radius: ${({ theme }) => theme.gridUnit}px;\n\n    &[name='name'] {\n      flex: 0 1 auto;\n      width: 40%;\n    }\n\n    &[name='sqlalchemy_uri'] {\n      margin-right: ${({ theme }) => theme.gridUnit * 3}px;\n    }\n  }\n`;\n\nexport interface ImportModelsModalProps {\n  resourceName: ImportResourceName;\n  resourceLabel: string;\n  passwordsNeededMessage: string;\n  confirmOverwriteMessage: string;\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  onModelImport: () => void;\n  show: boolean;\n  onHide: () => void;\n  passwordFields?: string[];\n  setPasswordFields?: (passwordFields: string[]) => void;\n}\n\nconst ImportModelsModal: FunctionComponent<ImportModelsModalProps> = ({\n  resourceName,\n  resourceLabel,\n  passwordsNeededMessage,\n  confirmOverwriteMessage,\n  onModelImport,\n  show,\n  onHide,\n  passwordFields = [],\n  setPasswordFields = () => {},\n}) => {\n  const [isHidden, setIsHidden] = useState<boolean>(true);\n  const [passwords, setPasswords] = useState<Record<string, string>>({});\n  const [needsOverwriteConfirm, setNeedsOverwriteConfirm] =\n    useState<boolean>(false);\n  const [confirmedOverwrite, setConfirmedOverwrite] = useState<boolean>(false);\n  const [fileList, setFileList] = useState<UploadFile[]>([]);\n  const [importingModel, setImportingModel] = useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = useState<string>();\n\n  const clearModal = () => {\n    setFileList([]);\n    setPasswordFields([]);\n    setPasswords({});\n    setNeedsOverwriteConfirm(false);\n    setConfirmedOverwrite(false);\n    setImportingModel(false);\n    setErrorMessage('');\n  };\n\n  const handleErrorMsg = (msg: string) => {\n    setErrorMessage(msg);\n  };\n\n  const {\n    state: { alreadyExists, passwordsNeeded },\n    importResource,\n  } = useImportResource(resourceName, resourceLabel, handleErrorMsg);\n\n  useEffect(() => {\n    setPasswordFields(passwordsNeeded);\n    if (passwordsNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [passwordsNeeded, setPasswordFields]);\n\n  useEffect(() => {\n    setNeedsOverwriteConfirm(alreadyExists.length > 0);\n    if (alreadyExists.length > 0) {\n      setImportingModel(false);\n    }\n  }, [alreadyExists, setNeedsOverwriteConfirm]);\n\n  // Functions\n  const hide = () => {\n    setIsHidden(true);\n    onHide();\n    clearModal();\n  };\n\n  const onUpload = () => {\n    if (!(fileList[0]?.originFileObj instanceof File)) {\n      return;\n    }\n\n    setImportingModel(true);\n    importResource(\n      fileList[0].originFileObj,\n      passwords,\n      confirmedOverwrite,\n    ).then(result => {\n      if (result) {\n        clearModal();\n        onModelImport();\n      }\n    });\n  };\n\n  const changeFile = (info: UploadChangeParam) => {\n    setFileList([\n      {\n        ...info.file,\n        status: 'done',\n      },\n    ]);\n  };\n\n  const removeFile = (removedFile: UploadFile) => {\n    setFileList(fileList.filter(file => file.uid !== removedFile.uid));\n    return false;\n  };\n\n  const confirmOverwrite = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const targetValue = (event.currentTarget?.value as string) ?? '';\n    setConfirmedOverwrite(targetValue.toUpperCase() === t('OVERWRITE'));\n  };\n\n  const renderPasswordFields = () => {\n    if (passwordFields.length === 0) {\n      return null;\n    }\n\n    return (\n      <>\n        <h5>{t('Database passwords')}</h5>\n        <HelperMessage>{passwordsNeededMessage}</HelperMessage>\n        {passwordFields.map(fileName => (\n          <StyledInputContainer key={`password-for-${fileName}`}>\n            <div className=\"control-label\">\n              {fileName}\n              <span className=\"required\">*</span>\n            </div>\n            <input\n              name={`password-${fileName}`}\n              autoComplete={`password-${fileName}`}\n              type=\"password\"\n              value={passwords[fileName]}\n              onChange={event =>\n                setPasswords({ ...passwords, [fileName]: event.target.value })\n              }\n            />\n          </StyledInputContainer>\n        ))}\n      </>\n    );\n  };\n\n  const renderOverwriteConfirmation = () => {\n    if (!needsOverwriteConfirm) {\n      return null;\n    }\n\n    return (\n      <>\n        <StyledInputContainer>\n          <div className=\"confirm-overwrite\">{confirmOverwriteMessage}</div>\n          <div className=\"control-label\">\n            {t('Type \"%s\" to confirm', t('OVERWRITE'))}\n          </div>\n          <input\n            data-test=\"overwrite-modal-input\"\n            id=\"overwrite\"\n            type=\"text\"\n            onChange={confirmOverwrite}\n          />\n        </StyledInputContainer>\n      </>\n    );\n  };\n\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n\n  return (\n    <Modal\n      name=\"model\"\n      className=\"import-model-modal\"\n      disablePrimaryButton={\n        fileList.length === 0 ||\n        (needsOverwriteConfirm && !confirmedOverwrite) ||\n        importingModel\n      }\n      onHandledPrimaryAction={onUpload}\n      onHide={hide}\n      primaryButtonName={needsOverwriteConfirm ? t('Overwrite') : t('Import')}\n      primaryButtonType={needsOverwriteConfirm ? 'danger' : 'primary'}\n      width=\"750px\"\n      show={show}\n      title={<h4>{t('Import %s', resourceLabel)}</h4>}\n    >\n      <StyledInputContainer>\n        <Upload\n          name=\"modelFile\"\n          id=\"modelFile\"\n          data-test=\"model-file-input\"\n          accept=\".yaml,.json,.yml,.zip\"\n          fileList={fileList}\n          onChange={changeFile}\n          onRemove={removeFile}\n          // upload is handled by hook\n          customRequest={() => {}}\n          disabled={importingModel}\n        >\n          <Button loading={importingModel}>{t('Select file')}</Button>\n        </Upload>\n      </StyledInputContainer>\n      {errorMessage && (\n        <ErrorAlert\n          errorMessage={errorMessage}\n          showDbInstallInstructions={passwordFields.length > 0}\n        />\n      )}\n      {renderPasswordFields()}\n      {renderOverwriteConfirmation()}\n    </Modal>\n  );\n};\n\nexport default ImportModelsModal;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { Link } from 'react-router-dom';\n\nexport type CrossLinksTooltipProps = {\n  children: React.ReactNode;\n  crossLinks: { to: string; title: string }[];\n  moreItems?: number;\n  show: boolean;\n};\n\nconst StyledLinkedTooltip = styled.div`\n  .link {\n    color: ${({ theme }) => theme.colors.grayscale.light5};\n    display: block;\n    text-decoration: underline;\n  }\n`;\n\nexport default function CrossLinksTooltip({\n  children,\n  crossLinks = [],\n  moreItems = undefined,\n  show = false,\n}: CrossLinksTooltipProps) {\n  return (\n    <Tooltip\n      placement=\"top\"\n      data-test=\"crosslinks-tooltip\"\n      title={\n        show && (\n          <StyledLinkedTooltip>\n            {crossLinks.map(link => (\n              <Link\n                className=\"link\"\n                key={link.to}\n                to={link.to}\n                target=\"_blank\"\n                rel=\"noreferer noopener\"\n              >\n                {link.title}\n              </Link>\n            ))}\n            {moreItems && (\n              <span data-test=\"plus-more\">{t('+ %s more', moreItems)}</span>\n            )}\n          </StyledLinkedTooltip>\n        )\n      }\n    >\n      {children}\n    </Tooltip>\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo, useRef } from 'react';\nimport { styled } from '@superset-ui/core';\nimport { Link } from 'react-router-dom';\nimport { useTruncation } from 'src/hooks/useTruncation';\nimport CrossLinksTooltip from './CrossLinksTooltip';\n\nexport type CrossLinkProps = {\n  title: string;\n  id: number;\n};\n\nexport type CrossLinksProps = {\n  crossLinks: Array<CrossLinkProps>;\n  maxLinks?: number;\n  linkPrefix?: string;\n};\n\nconst StyledCrossLinks = styled.div`\n  ${({ theme }) => `\n    & > span {\n      width: 100%;\n      display: flex;\n\n      .ant-tooltip-open {\n        display: inline;\n      }\n\n      .truncated {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        display: inline-block;\n        width: 100%;\n        vertical-align: bottom;\n      }\n\n      .count {\n        cursor: pointer;\n        color: ${theme.colors.grayscale.base};\n        font-weight: ${theme.typography.weights.bold};\n      }\n    }\n  `}\n`;\n\nexport default function CrossLinks({\n  crossLinks,\n  maxLinks = 20,\n  linkPrefix = '/superset/dashboard/',\n}: CrossLinksProps) {\n  const crossLinksRef = useRef<HTMLDivElement>(null);\n  const plusRef = useRef<HTMLDivElement>(null);\n  const [elementsTruncated, hasHiddenElements] = useTruncation(\n    crossLinksRef,\n    plusRef,\n  );\n  const hasMoreItems = useMemo(\n    () =>\n      crossLinks.length > maxLinks ? crossLinks.length - maxLinks : undefined,\n    [crossLinks, maxLinks],\n  );\n  const links = useMemo(\n    () => (\n      <span className=\"truncated\" ref={crossLinksRef} data-test=\"crosslinks\">\n        {crossLinks.map((link, index) => (\n          <Link\n            key={link.id}\n            to={linkPrefix + link.id}\n            target=\"_blank\"\n            rel=\"noreferer noopener\"\n          >\n            {index === 0 ? link.title : `, ${link.title}`}\n          </Link>\n        ))}\n      </span>\n    ),\n    [crossLinks],\n  );\n  const tooltipLinks = useMemo(\n    () =>\n      crossLinks.slice(0, maxLinks).map(l => ({\n        title: l.title,\n        to: linkPrefix + l.id,\n      })),\n    [crossLinks, maxLinks],\n  );\n\n  return (\n    <StyledCrossLinks>\n      <CrossLinksTooltip\n        moreItems={hasMoreItems}\n        crossLinks={tooltipLinks}\n        show={!!elementsTruncated}\n      >\n        {links}\n        {hasHiddenElements && (\n          <span ref={plusRef} className=\"count\" data-test=\"count-crosslinks\">\n            +{elementsTruncated}\n          </span>\n        )}\n      </CrossLinksTooltip>\n    </StyledCrossLinks>\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  ensureIsArray,\n  getChartMetadataRegistry,\n  JsonResponse,\n  styled,\n  SupersetClient,\n  t,\n} from '@superset-ui/core';\nimport React, { useState, useMemo, useCallback } from 'react';\nimport rison from 'rison';\nimport { uniqBy } from 'lodash';\nimport moment from 'moment';\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';\nimport {\n  createErrorHandler,\n  createFetchRelated,\n  handleChartDelete,\n} from 'src/views/CRUD/utils';\nimport {\n  useChartEditModal,\n  useFavoriteStatus,\n  useListViewResource,\n} from 'src/views/CRUD/hooks';\nimport handleResourceExport from 'src/utils/export';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport SubMenu, { SubMenuProps } from 'src/views/components/SubMenu';\nimport FaveStar from 'src/components/FaveStar';\nimport { Link, useHistory } from 'react-router-dom';\nimport ListView, {\n  Filter,\n  FilterOperator,\n  Filters,\n  ListViewProps,\n  SelectOption,\n} from 'src/components/ListView';\nimport CrossLinks from 'src/components/ListView/CrossLinks';\nimport Loading from 'src/components/Loading';\nimport { dangerouslyGetItemDoNotUse } from 'src/utils/localStorageHelpers';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport PropertiesModal from 'src/explore/components/PropertiesModal';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport Chart, { ChartLinkedDashboard } from 'src/types/Chart';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport { nativeFilterGate } from 'src/dashboard/components/nativeFilters/utils';\nimport setupPlugins from 'src/setup/setupPlugins';\nimport InfoTooltip from 'src/components/InfoTooltip';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport { GenericLink } from 'src/components/GenericLink/GenericLink';\nimport getBootstrapData from 'src/utils/getBootstrapData';\nimport Owner from 'src/types/Owner';\nimport ChartCard from './ChartCard';\n\nconst FlexRowContainer = styled.div`\n  align-items: center;\n  display: flex;\n\n  a {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    line-height: 1.2;\n  }\n\n  svg {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst PAGE_SIZE = 25;\nconst PASSWORDS_NEEDED_MESSAGE = t(\n  'The passwords for the databases below are needed in order to ' +\n    'import them together with the charts. Please note that the ' +\n    '\"Secure Extra\" and \"Certificate\" sections of ' +\n    'the database configuration are not present in export files, and ' +\n    'should be added manually after the import if they are needed.',\n);\nconst CONFIRM_OVERWRITE_MESSAGE = t(\n  'You are importing one or more charts that already exist. ' +\n    'Overwriting might cause you to lose some of your work. Are you ' +\n    'sure you want to overwrite?',\n);\n\nsetupPlugins();\nconst registry = getChartMetadataRegistry();\n\nconst createFetchDatasets = async (\n  filterValue = '',\n  page: number,\n  pageSize: number,\n) => {\n  // add filters if filterValue\n  const filters = filterValue\n    ? { filters: [{ col: 'table_name', opr: 'sw', value: filterValue }] }\n    : {};\n  const queryParams = rison.encode({\n    columns: ['datasource_name', 'datasource_id'],\n    keys: ['none'],\n    order_column: 'table_name',\n    order_direction: 'asc',\n    page,\n    page_size: pageSize,\n    ...filters,\n  });\n\n  const { json = {} } = await SupersetClient.get({\n    endpoint: `/api/v1/dataset/?q=${queryParams}`,\n  });\n\n  const datasets = json?.result?.map(\n    ({ table_name: tableName, id }: { table_name: string; id: number }) => ({\n      label: tableName,\n      value: id,\n    }),\n  );\n\n  return {\n    data: uniqBy<SelectOption>(datasets, 'value'),\n    totalCount: json?.count,\n  };\n};\n\ninterface ChartListProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  user: {\n    userId: string | number;\n    firstName: string;\n    lastName: string;\n  };\n}\n\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\n\nconst bootstrapData = getBootstrapData();\n\nfunction ChartList(props: ChartListProps) {\n  const {\n    addDangerToast,\n    addSuccessToast,\n    user: { userId },\n  } = props;\n\n  const history = useHistory();\n\n  const {\n    state: {\n      loading,\n      resourceCount: chartCount,\n      resourceCollection: charts,\n      bulkSelectEnabled,\n    },\n    setResourceCollection: setCharts,\n    hasPerm,\n    fetchData,\n    toggleBulkSelect,\n    refreshData,\n  } = useListViewResource<Chart>('chart', t('chart'), addDangerToast);\n\n  const chartIds = useMemo(() => charts.map(c => c.id), [charts]);\n\n  const [saveFavoriteStatus, favoriteStatus] = useFavoriteStatus(\n    'chart',\n    chartIds,\n    addDangerToast,\n  );\n  const {\n    sliceCurrentlyEditing,\n    handleChartUpdated,\n    openChartEditModal,\n    closeChartEditModal,\n  } = useChartEditModal(setCharts, charts);\n\n  const [importingChart, showImportModal] = useState<boolean>(false);\n  const [passwordFields, setPasswordFields] = useState<string[]>([]);\n  const [preparingExport, setPreparingExport] = useState<boolean>(false);\n\n  // TODO: Fix usage of localStorage keying on the user id\n  const userSettings = dangerouslyGetItemDoNotUse(userId?.toString(), null) as {\n    thumbnails: boolean;\n  };\n\n  const openChartImportModal = () => {\n    showImportModal(true);\n  };\n\n  const closeChartImportModal = () => {\n    showImportModal(false);\n  };\n\n  const handleChartImport = () => {\n    showImportModal(false);\n    refreshData();\n    addSuccessToast(t('Chart imported'));\n  };\n\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport =\n    hasPerm('can_export') && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT);\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n  const enableBroadUserAccess =\n    bootstrapData.common.conf.ENABLE_BROAD_ACTIVITY_ACCESS;\n  const handleBulkChartExport = (chartsToExport: Chart[]) => {\n    const ids = chartsToExport.map(({ id }) => id);\n    handleResourceExport('chart', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n  const changedByName = (lastSavedBy: Owner) =>\n    lastSavedBy?.first_name\n      ? `${lastSavedBy?.first_name} ${lastSavedBy?.last_name}`\n      : null;\n\n  function handleBulkChartDelete(chartsToDelete: Chart[]) {\n    SupersetClient.delete({\n      endpoint: `/api/v1/chart/?q=${rison.encode(\n        chartsToDelete.map(({ id }) => id),\n      )}`,\n    }).then(\n      ({ json = {} }) => {\n        refreshData();\n        addSuccessToast(json.message);\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue deleting the selected charts: %s', errMsg),\n        ),\n      ),\n    );\n  }\n  const fetchDashboards = async (\n    filterValue = '',\n    page: number,\n    pageSize: number,\n  ) => {\n    // add filters if filterValue\n    const filters = filterValue\n      ? {\n          filters: [\n            {\n              col: 'dashboards',\n              opr: FilterOperator.relationManyMany,\n              value: filterValue,\n            },\n          ],\n        }\n      : {};\n    const queryParams = rison.encode({\n      columns: ['dashboard_title', 'id'],\n      keys: ['none'],\n      order_column: 'dashboard_title',\n      order_direction: 'asc',\n      page,\n      page_size: pageSize,\n      ...filters,\n    });\n    const response: void | JsonResponse = await SupersetClient.get({\n      endpoint: !filterValue\n        ? `/api/v1/dashboard/?q=${queryParams}`\n        : `/api/v1/chart/?q=${queryParams}`,\n    }).catch(() =>\n      addDangerToast(t('An error occurred while fetching dashboards')),\n    );\n    const dashboards = response?.json?.result?.map(\n      ({\n        dashboard_title: dashboardTitle,\n        id,\n      }: {\n        dashboard_title: string;\n        id: number;\n      }) => ({\n        label: dashboardTitle,\n        value: id,\n      }),\n    );\n    return {\n      data: uniqBy<SelectOption>(dashboards, 'value'),\n      totalCount: response?.json?.count,\n    };\n  };\n\n  const columns = useMemo(\n    () => [\n      {\n        Cell: ({\n          row: {\n            original: { id },\n          },\n        }: any) =>\n          userId && (\n            <FaveStar\n              itemId={id}\n              saveFaveStar={saveFavoriteStatus}\n              isStarred={favoriteStatus[id]}\n            />\n          ),\n        Header: '',\n        id: 'id',\n        disableSortBy: true,\n        size: 'xs',\n        hidden: !userId,\n      },\n      {\n        Cell: ({\n          row: {\n            original: {\n              url,\n              slice_name: sliceName,\n              certified_by: certifiedBy,\n              certification_details: certificationDetails,\n              description,\n            },\n          },\n        }: any) => (\n          <FlexRowContainer>\n            <Link to={url} data-test={`${sliceName}-list-chart-title`}>\n              {certifiedBy && (\n                <>\n                  <CertifiedBadge\n                    certifiedBy={certifiedBy}\n                    details={certificationDetails}\n                  />{' '}\n                </>\n              )}\n              {sliceName}\n            </Link>\n            {description && (\n              <InfoTooltip tooltip={description} viewBox=\"0 -1 24 24\" />\n            )}\n          </FlexRowContainer>\n        ),\n        Header: t('Chart'),\n        accessor: 'slice_name',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { viz_type: vizType },\n          },\n        }: any) => registry.get(vizType)?.name || vizType,\n        Header: t('Visualization type'),\n        accessor: 'viz_type',\n        size: 'xxl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: {\n              datasource_name_text: dsNameTxt,\n              datasource_url: dsUrl,\n            },\n          },\n        }: any) => <GenericLink to={dsUrl}>{dsNameTxt}</GenericLink>,\n        Header: t('Dataset'),\n        accessor: 'datasource_id',\n        disableSortBy: true,\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { dashboards },\n          },\n        }: any) => (\n          <CrossLinks\n            crossLinks={ensureIsArray(dashboards).map(\n              (d: ChartLinkedDashboard) => ({\n                title: d.dashboard_title,\n                id: d.id,\n              }),\n            )}\n          />\n        ),\n        Header: t('Dashboards added to'),\n        accessor: 'dashboards',\n        disableSortBy: true,\n        size: 'xxl',\n        hidden: true,\n      },\n      {\n        Cell: ({\n          row: {\n            original: {\n              last_saved_by: lastSavedBy,\n              changed_by_url: changedByUrl,\n            },\n          },\n        }: any) =>\n          enableBroadUserAccess ? (\n            <a href={changedByUrl}>{changedByName(lastSavedBy)}</a>\n          ) : (\n            <>{changedByName(lastSavedBy)}</>\n          ),\n        Header: t('Modified by'),\n        accessor: 'last_saved_by.first_name',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { last_saved_at: lastSavedAt },\n          },\n        }: any) => (\n          <span className=\"no-wrap\">\n            {lastSavedAt ? moment.utc(lastSavedAt).fromNow() : null}\n          </span>\n        ),\n        Header: t('Last modified'),\n        accessor: 'last_saved_at',\n        size: 'xl',\n      },\n      {\n        accessor: 'owners',\n        hidden: true,\n        disableSortBy: true,\n      },\n      {\n        Cell: ({\n          row: {\n            original: { created_by: createdBy },\n          },\n        }: any) =>\n          createdBy ? `${createdBy.first_name} ${createdBy.last_name}` : '',\n        Header: t('Created by'),\n        accessor: 'created_by',\n        disableSortBy: true,\n        size: 'xl',\n      },\n      {\n        Cell: ({ row: { original } }: any) => {\n          const handleDelete = () =>\n            handleChartDelete(\n              original,\n              addSuccessToast,\n              addDangerToast,\n              refreshData,\n            );\n          const openEditModal = () => openChartEditModal(original);\n          const handleExport = () => handleBulkChartExport([original]);\n          if (!canEdit && !canDelete && !canExport) {\n            return null;\n          }\n\n          return (\n            <Actions className=\"actions\">\n              {canDelete && (\n                <ConfirmStatusChange\n                  title={t('Please confirm')}\n                  description={\n                    <>\n                      {t('Are you sure you want to delete')}{' '}\n                      <b>{original.slice_name}</b>?\n                    </>\n                  }\n                  onConfirm={handleDelete}\n                >\n                  {confirmDelete => (\n                    <Tooltip\n                      id=\"delete-action-tooltip\"\n                      title={t('Delete')}\n                      placement=\"bottom\"\n                    >\n                      <span\n                        data-test=\"trash\"\n                        role=\"button\"\n                        tabIndex={0}\n                        className=\"action-button\"\n                        onClick={confirmDelete}\n                      >\n                        <Icons.Trash />\n                      </span>\n                    </Tooltip>\n                  )}\n                </ConfirmStatusChange>\n              )}\n              {canExport && (\n                <Tooltip\n                  id=\"export-action-tooltip\"\n                  title={t('Export')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleExport}\n                  >\n                    <Icons.Share />\n                  </span>\n                </Tooltip>\n              )}\n              {canEdit && (\n                <Tooltip\n                  id=\"edit-action-tooltip\"\n                  title={t('Edit')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={openEditModal}\n                  >\n                    <Icons.EditAlt data-test=\"edit-alt\" />\n                  </span>\n                </Tooltip>\n              )}\n            </Actions>\n          );\n        },\n        Header: t('Actions'),\n        id: 'actions',\n        disableSortBy: true,\n        hidden: !canEdit && !canDelete,\n      },\n    ],\n    [\n      userId,\n      canEdit,\n      canDelete,\n      canExport,\n      saveFavoriteStatus,\n      favoriteStatus,\n      refreshData,\n      addSuccessToast,\n      addDangerToast,\n    ],\n  );\n\n  const favoritesFilter: Filter = useMemo(\n    () => ({\n      Header: t('Favorite'),\n      key: 'favorite',\n      id: 'id',\n      urlDisplay: 'favorite',\n      input: 'select',\n      operator: FilterOperator.chartIsFav,\n      unfilteredLabel: t('Any'),\n      selects: [\n        { label: t('Yes'), value: true },\n        { label: t('No'), value: false },\n      ],\n    }),\n    [],\n  );\n\n  const filters: Filters = useMemo(\n    () => [\n      {\n        Header: t('Owner'),\n        key: 'owner',\n        id: 'owners',\n        input: 'select',\n        operator: FilterOperator.relationManyMany,\n        unfilteredLabel: t('All'),\n        fetchSelects: createFetchRelated(\n          'chart',\n          'owners',\n          createErrorHandler(errMsg =>\n            addDangerToast(\n              t(\n                'An error occurred while fetching chart owners values: %s',\n                errMsg,\n              ),\n            ),\n          ),\n          props.user,\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Created by'),\n        key: 'created_by',\n        id: 'created_by',\n        input: 'select',\n        operator: FilterOperator.relationOneMany,\n        unfilteredLabel: t('All'),\n        fetchSelects: createFetchRelated(\n          'chart',\n          'created_by',\n          createErrorHandler(errMsg =>\n            addDangerToast(\n              t(\n                'An error occurred while fetching chart created by values: %s',\n                errMsg,\n              ),\n            ),\n          ),\n          props.user,\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Chart type'),\n        key: 'viz_type',\n        id: 'viz_type',\n        input: 'select',\n        operator: FilterOperator.equals,\n        unfilteredLabel: t('All'),\n        selects: registry\n          .keys()\n          .filter(k => nativeFilterGate(registry.get(k)?.behaviors || []))\n          .map(k => ({ label: registry.get(k)?.name || k, value: k }))\n          .sort((a, b) => {\n            if (!a.label || !b.label) {\n              return 0;\n            }\n\n            if (a.label > b.label) {\n              return 1;\n            }\n            if (a.label < b.label) {\n              return -1;\n            }\n\n            return 0;\n          }),\n      },\n      {\n        Header: t('Dataset'),\n        key: 'dataset',\n        id: 'datasource_id',\n        input: 'select',\n        operator: FilterOperator.equals,\n        unfilteredLabel: t('All'),\n        fetchSelects: createFetchDatasets,\n        paginate: true,\n      },\n      {\n        Header: t('Dashboards'),\n        key: 'dashboards',\n        id: 'dashboards',\n        input: 'select',\n        operator: FilterOperator.relationManyMany,\n        unfilteredLabel: t('All'),\n        fetchSelects: fetchDashboards,\n        paginate: true,\n      },\n      ...(userId ? [favoritesFilter] : []),\n      {\n        Header: t('Certified'),\n        key: 'certified',\n        id: 'id',\n        urlDisplay: 'certified',\n        input: 'select',\n        operator: FilterOperator.chartIsCertified,\n        unfilteredLabel: t('Any'),\n        selects: [\n          { label: t('Yes'), value: true },\n          { label: t('No'), value: false },\n        ],\n      },\n      {\n        Header: t('Search'),\n        key: 'search',\n        id: 'slice_name',\n        input: 'search',\n        operator: FilterOperator.chartAllText,\n      },\n    ],\n    [addDangerToast, favoritesFilter, props.user],\n  );\n\n  const sortTypes = [\n    {\n      desc: false,\n      id: 'slice_name',\n      label: t('Alphabetical'),\n      value: 'alphabetical',\n    },\n    {\n      desc: true,\n      id: 'changed_on_delta_humanized',\n      label: t('Recently modified'),\n      value: 'recently_modified',\n    },\n    {\n      desc: false,\n      id: 'changed_on_delta_humanized',\n      label: t('Least recently modified'),\n      value: 'least_recently_modified',\n    },\n  ];\n\n  const renderCard = useCallback(\n    (chart: Chart) => (\n      <ChartCard\n        chart={chart}\n        showThumbnails={\n          userSettings\n            ? userSettings.thumbnails\n            : isFeatureEnabled(FeatureFlag.THUMBNAILS)\n        }\n        hasPerm={hasPerm}\n        openChartEditModal={openChartEditModal}\n        bulkSelectEnabled={bulkSelectEnabled}\n        addDangerToast={addDangerToast}\n        addSuccessToast={addSuccessToast}\n        refreshData={refreshData}\n        userId={userId}\n        loading={loading}\n        favoriteStatus={favoriteStatus[chart.id]}\n        saveFavoriteStatus={saveFavoriteStatus}\n        handleBulkChartExport={handleBulkChartExport}\n      />\n    ),\n    [\n      addDangerToast,\n      addSuccessToast,\n      bulkSelectEnabled,\n      favoriteStatus,\n      hasPerm,\n      loading,\n    ],\n  );\n\n  const subMenuButtons: SubMenuProps['buttons'] = [];\n  if (canDelete || canExport) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      buttonStyle: 'secondary',\n      'data-test': 'bulk-select',\n      onClick: toggleBulkSelect,\n    });\n  }\n  if (canCreate) {\n    subMenuButtons.push({\n      name: (\n        <>\n          <i className=\"fa fa-plus\" /> {t('Chart')}\n        </>\n      ),\n      buttonStyle: 'primary',\n      onClick: () => {\n        history.push('/chart/add');\n      },\n    });\n\n    if (isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n      subMenuButtons.push({\n        name: (\n          <Tooltip\n            id=\"import-tooltip\"\n            title={t('Import charts')}\n            placement=\"bottomRight\"\n          >\n            <Icons.Import data-test=\"import-button\" />\n          </Tooltip>\n        ),\n        buttonStyle: 'link',\n        onClick: openChartImportModal,\n      });\n    }\n  }\n\n  return (\n    <>\n      <SubMenu name={t('Charts')} buttons={subMenuButtons} />\n      {sliceCurrentlyEditing && (\n        <PropertiesModal\n          onHide={closeChartEditModal}\n          onSave={handleChartUpdated}\n          show\n          slice={sliceCurrentlyEditing}\n        />\n      )}\n      <ConfirmStatusChange\n        title={t('Please confirm')}\n        description={t('Are you sure you want to delete the selected charts?')}\n        onConfirm={handleBulkChartDelete}\n      >\n        {confirmDelete => {\n          const bulkActions: ListViewProps['bulkActions'] = [];\n          if (canDelete) {\n            bulkActions.push({\n              key: 'delete',\n              name: t('Delete'),\n              type: 'danger',\n              onSelect: confirmDelete,\n            });\n          }\n          if (canExport) {\n            bulkActions.push({\n              key: 'export',\n              name: t('Export'),\n              type: 'primary',\n              onSelect: handleBulkChartExport,\n            });\n          }\n          return (\n            <ListView<Chart>\n              bulkActions={bulkActions}\n              bulkSelectEnabled={bulkSelectEnabled}\n              cardSortSelectOptions={sortTypes}\n              className=\"chart-list-view\"\n              columns={columns}\n              count={chartCount}\n              data={charts}\n              disableBulkSelect={toggleBulkSelect}\n              fetchData={fetchData}\n              filters={filters}\n              initialSort={initialSort}\n              loading={loading}\n              pageSize={PAGE_SIZE}\n              renderCard={renderCard}\n              showThumbnails={\n                userSettings\n                  ? userSettings.thumbnails\n                  : isFeatureEnabled(FeatureFlag.THUMBNAILS)\n              }\n              defaultViewMode={\n                isFeatureEnabled(FeatureFlag.LISTVIEWS_DEFAULT_CARD_VIEW)\n                  ? 'card'\n                  : 'table'\n              }\n            />\n          );\n        }}\n      </ConfirmStatusChange>\n\n      <ImportModelsModal\n        resourceName=\"chart\"\n        resourceLabel={t('chart')}\n        passwordsNeededMessage={PASSWORDS_NEEDED_MESSAGE}\n        confirmOverwriteMessage={CONFIRM_OVERWRITE_MESSAGE}\n        addDangerToast={addDangerToast}\n        addSuccessToast={addSuccessToast}\n        onModelImport={handleChartImport}\n        show={importingChart}\n        onHide={closeChartImportModal}\n        passwordFields={passwordFields}\n        setPasswordFields={setPasswordFields}\n      />\n      {preparingExport && <Loading />}\n    </>\n  );\n}\n\nexport default withToasts(ChartList);\n"],"names":["baseIteratee","baseUniq","module","exports","array","iteratee","length","HelperMessage","styled","theme","colors","grayscale","base","typography","sizes","s","StyledInputContainer","gridUnit","light1","light2","resourceName","resourceLabel","passwordsNeededMessage","confirmOverwriteMessage","onModelImport","show","onHide","passwordFields","setPasswordFields","isHidden","setIsHidden","useState","passwords","setPasswords","needsOverwriteConfirm","setNeedsOverwriteConfirm","confirmedOverwrite","setConfirmedOverwrite","fileList","setFileList","importingModel","setImportingModel","errorMessage","setErrorMessage","clearModal","state","alreadyExists","passwordsNeeded","importResource","useImportResource","msg","useEffect","name","className","disablePrimaryButton","onHandledPrimaryAction","originFileObj","File","then","result","primaryButtonName","t","primaryButtonType","width","title","id","accept","onChange","info","file","status","onRemove","removedFile","filter","uid","customRequest","disabled","loading","showDbInstallInstructions","map","fileName","key","autoComplete","type","value","event","target","targetValue","currentTarget","toUpperCase","StyledLinkedTooltip","light5","CrossLinksTooltip","children","crossLinks","moreItems","Tooltip","placement","link","to","rel","StyledCrossLinks","weights","bold","CrossLinks","maxLinks","linkPrefix","crossLinksRef","useRef","plusRef","elementsTruncated","hasHiddenElements","useTruncation","hasMoreItems","useMemo","undefined","links","ref","index","tooltipLinks","slice","l","FlexRowContainer","PASSWORDS_NEEDED_MESSAGE","CONFIRM_OVERWRITE_MESSAGE","setupPlugins","registry","getChartMetadataRegistry","createFetchDatasets","async","filterValue","page","pageSize","filters","col","opr","queryParams","rison","columns","keys","order_column","order_direction","page_size","json","SupersetClient","endpoint","datasets","table_name","tableName","label","data","totalCount","count","Actions","bootstrapData","getBootstrapData","withToasts","props","addDangerToast","addSuccessToast","user","userId","history","useHistory","resourceCount","chartCount","resourceCollection","charts","bulkSelectEnabled","setResourceCollection","setCharts","hasPerm","fetchData","toggleBulkSelect","refreshData","useListViewResource","chartIds","c","saveFavoriteStatus","favoriteStatus","useFavoriteStatus","sliceCurrentlyEditing","handleChartUpdated","openChartEditModal","closeChartEditModal","useChartEditModal","importingChart","showImportModal","preparingExport","setPreparingExport","userSettings","dangerouslyGetItemDoNotUse","toString","canCreate","canEdit","canDelete","canExport","isFeatureEnabled","FeatureFlag","initialSort","desc","enableBroadUserAccess","common","conf","ENABLE_BROAD_ACTIVITY_ACCESS","handleBulkChartExport","chartsToExport","ids","handleResourceExport","changedByName","lastSavedBy","first_name","last_name","fetchDashboards","FilterOperator","response","catch","dashboards","dashboard_title","dashboardTitle","Cell","row","original","FaveStar","itemId","saveFaveStar","isStarred","Header","disableSortBy","size","hidden","url","slice_name","sliceName","certified_by","certifiedBy","certification_details","certificationDetails","description","CertifiedBadge","details","InfoTooltip","tooltip","viewBox","accessor","viz_type","vizType","get","datasource_name_text","dsNameTxt","datasource_url","dsUrl","GenericLink","ensureIsArray","d","last_saved_by","changed_by_url","changedByUrl","href","last_saved_at","lastSavedAt","moment","fromNow","created_by","createdBy","ConfirmStatusChange","onConfirm","handleChartDelete","confirmDelete","role","tabIndex","onClick","Icons","favoritesFilter","urlDisplay","input","operator","unfilteredLabel","selects","fetchSelects","createFetchRelated","createErrorHandler","errMsg","paginate","k","nativeFilterGate","behaviors","sort","a","b","sortTypes","renderCard","useCallback","chart","ChartCard","showThumbnails","thumbnails","subMenuButtons","push","buttonStyle","SubMenu","buttons","PropertiesModal","onSave","chartsToDelete","message","bulkActions","onSelect","ListView","cardSortSelectOptions","disableBulkSelect","defaultViewMode","Loading"],"sourceRoot":""}